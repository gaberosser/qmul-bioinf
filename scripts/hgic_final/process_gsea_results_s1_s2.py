import pandas as pd
import os
import collections
from rnaseq import gsea
from settings import HGIC_LOCAL_DIR
from utils import log, setops, output, excel
from plotting import venn
from matplotlib import pyplot as plt
import consts
logger = log.get_console_logger("process_GSEA_results")


def load_and_process_csv(fn, fdr=0.05):
    """
    Process a single set of GSEA results, encoded in a CSV file.
    These files reside in the 'raw' results directory, but are in fact generated by concatenating two reports.
    Results with a POSITIVE NES are enriched/upregulated in GBM vs (i)NSC.
    :param fn: Path to CSV file
    :return: Pandas dataframe
    """
    df = pd.read_csv(fn, sep='\t', header=0, index_col=0, usecols=[0, 3, 4, 5, 6, 7, 8])
    df.columns = ['n_gene', 'es', 'nes', 'pval', 'fdr', 'fwer']

    if fdr is not None:
        df = df.loc[df.fdr <= fdr]

    # add column reporting which species the pathway is enriched in
    ei = pd.Series('NSC', index=df.index)
    ei.loc[df.nes > 0] = 'GBM'

    df.insert(df.columns.size, 'enriched_in', ei)

    return df


def load_pathways(df):
    """
    This isn't really used at the moment (TODO?).
    Look at scripts.gsea.process_results_s1_s2 for existing example.
    :param df:
    :return:
    """
    pass


if __name__ == "__main__":
    """
    Use the results generated by exporting data with prepare_data then running GSEA (see code comments in prepare_data).
    """
    pids = consts.PIDS
    refs = ['gibco_nsc', 'h9_nsc']
    top_n_pathways = 20
    units = 'tpm'
    fdr = 0.05  # set to None to skip filtering
    indir = os.path.join(os.path.expanduser('~'), 'Dropbox', 'research')
    indir = os.path.join(
        HGIC_LOCAL_DIR,
        "current",
        "core_pipeline",
        "rnaseq",
        "s0_individual_patients_direct_comparison",
        "gsea",
        "results",
        "raw"
    )
    outdir = output.unique_output_dir("gsea_data")

    subgroups = consts.SUBGROUPS

    # indicator showing which groups the PIDs belong to
    subgroup_ind = collections.OrderedDict([
        (k, pd.Index(pids).isin(subgroups[k])) for k in ['RTK I', 'RTK II', 'MES']
    ])

    # S1
    s1_reports = {}
    s1_pathways = {}

    for pid in pids:
        res_fn = os.path.join(indir, "%s.csv" % pid)
        s1_reports[pid] = load_and_process_csv(res_fn, fdr=fdr)

    # S2
    s2_reports = {}
    s2_pathways = {}
    for pid in pids:
        for r in refs:
            k = "%s_%s" % (pid, r)
            res_fn = os.path.join(indir, "%s.csv" % k)
            s2_reports[k] = load_and_process_csv(res_fn, fdr=fdr)

    # S1 patient-specific
    s1_set_idx = [s1_reports[p].index for p in pids]

    subgroup_set_colours = {
        'RTK I full': '#0d680f',
        'RTK II full': '#820505',
        'MES full': '#7900ad',
        'RTK I partial': '#6ecc70',
        'RTK II partial': '#d67373',
        'MES partial': '#cc88ea',  # (partial not possible when n=2)
        'Expanded core': '#4C72B0',
        'Specific': '#f4e842',
    }

    venn_set, venn_ct = setops.venn_from_arrays(*s1_set_idx)
    ups = venn.upset_plot_with_groups(
        s1_set_idx,
        pids,
        subgroup_ind,
        subgroup_set_colours,
        venn_set=venn_set,
        min_size=1,
        n_plot=30,
    )
    ups['axes']['set_size'].set_xlabel("Number of pathways in single patient")
    ups['axes']['main'].set_ylabel("Number of pathways in set")
    ups['figure'].savefig(os.path.join(outdir, "s1_upset_pathways.png"), dpi=200)
    ups['figure'].savefig(os.path.join(outdir, "s1_upset_pathways.tiff"), dpi=200)

    # export
    s1_specific = {}
    specific_sets = setops.specific_sets(pids)
    for p, s in specific_sets.items():
        s1_specific[p] = s1_reports[p].loc[venn_set[s]]
    excel.pandas_to_excel(s1_specific, os.path.join(outdir, "s1_patient_specific.xlsx"))

    # S2 syngeneic-only

    s2_syngeneic = {}
    for p in pids:
        in_ours = s1_reports[p].index
        in_refs = setops.reduce_union(*[s2_reports["%s_%s" % (p, r)].index for r in refs])
        in_so = in_ours.difference(in_refs)
        tmp = s1_reports[p].loc[in_so]
        s2_syngeneic[p] = tmp.loc[tmp.nes.abs().sort_values(ascending=False).index]

    fig = plt.figure()
    ax = fig.add_subplot(111)
    ax.bar(
        range(len(pids)),
        [s2_syngeneic[p].shape[0] for p in pids]
    )
    ax.set_xticks(range(len(pids)))
    ax.set_xticklabels(pids)
    ax.set_ylabel("Number of syngeneic-only pathways")
    fig.tight_layout()
    fig.savefig(os.path.join(outdir, "s2_number_syngeneic_only.png"), dpi=200)

    excel.pandas_to_excel(s2_syngeneic, os.path.join(outdir, "s2_syngeneic.xlsx"))

    # S1 and 2: patient-specific AND syngeneic only

    s3 = {}
    for p in pids:
        in_s1 = s1_specific[p]
        in_s2 = s2_syngeneic[p]
        tmp = s1_reports[p].loc[in_s1.index.intersection(in_s2.index)]
        s3[p] = tmp.loc[tmp.nes.abs().sort_values(ascending=False).index]

    fig = plt.figure()
    ax = fig.add_subplot(111)
    ax.bar(
        range(len(pids)),
        [s3[p].shape[0] for p in pids]
    )
    ax.set_xticks(range(len(pids)))
    ax.set_xticklabels(pids)
    ax.set_ylabel("Number of patient-specific syngeneic-only pathways")
    fig.tight_layout()
    fig.savefig(os.path.join(outdir, "number_merge_patient_specific_syngeneic_only.png"), dpi=200)

    excel.pandas_to_excel(s3, os.path.join(outdir, "merge_patient_specific_syngeneic_only.xlsx"))

