"""
Sandbox for playing around with Cytoscape via py2cytoscape

Following examples here (but they are a bit broken):
http://nbviewer.jupyter.org/github/idekerlab/py2cytoscape/blob/develop/examples/New_wrapper_api_sample.ipynb

In particular, the ability to use networkx directly is very exciting
Dependencies: py2cytoscape, Cytoscape (separate application running in Java)

Before running, we have to open Cytoscape software

NB. There was a syntax issue (Python 3 code?) in py2cytoscape 0.7.0, so for now a modified version lives in apps
"""

from apps.py2cytoscape.cyrest import cyclient
from apps.py2cytoscape.data.cyrest_client import CyRestClient
from apps.py2cytoscape.data import style

import networkx as nx
import names
import os
import numpy as np


if __name__ == '__main__':
    cy = CyRestClient()
    # reset the session (in case something is already loaded)
    cy.session.delete()

    # toy graph, simulated in networkX
    nx_graph = nx.scale_free_graph(100)
    # change node names in place
    nx.relabel_nodes(
        nx_graph,
        dict([(i, names.get_first_name()) for i in nx_graph.nodes]),
        copy=False
    )

    # we can add any attribute to the nodes providing it is encoded in a dictionary (keyed by node IDs)
    # e.g. node degree
    aa = nx.degree(nx_graph)
    dg = dict([(x, aa[x]) for x in aa._nodes.keys()])
    nx.set_node_attributes(nx_graph, dg, 'Degree')

    # add double attribute to the edges
    for n1, n2, i in nx_graph.edges:
        nx_graph[n1][n2][i]['width'] = np.abs(np.random.randn())

    # add list attribute to the edges (e.g. this could be genes)
    for n1, n2, i in nx_graph.edges:
        nx_graph[n1][n2][i]['the_list'] = ['a', 'bc', '123']

    # e.g. node betweenness centrality
    nx.set_node_attributes(nx_graph, nx.betweenness_centrality(nx_graph), 'Centrality')

    net = cy.network.create_from_networkx(nx_graph, collection='Generated by NetworkX')

    cy.layout.apply("force-directed", network=net)

    # create a style for use on the network
    my_style = cy.style.create('my_style')

    # passthrough node labels
    my_style.create_passthrough_mapping(column='name', vp='NODE_LABEL', col_type='String')

    # style node colour based on betweenness
    color_gradient = style.StyleUtil.create_2_color_gradient(
        min=min(dg.values()),
        max=max(dg.values()),
        colors=('white', 'blue')
    )
    my_style.create_continuous_mapping(column='Degree', vp='NODE_FILL_COLOR', col_type='Double', points=color_gradient)

    # style edge width based on interaction
    i_to_size = style.StyleUtil.create_slope(min=0, max=10, values=(10, 40))
    my_style.create_continuous_mapping(column='width', vp='EDGE_WIDTH', col_type='Double', points=i_to_size)

    cy.style.apply(my_style, network=net)

    # add a second network, with some (but not all) nodes shared
    g2 = nx.scale_free_graph(50)
    node_names = dict([
        (i, nx_graph.nodes.keys()[i]) for i in range(30)
    ])
    node_names.update(
        dict([(i, names.get_last_name()) for i in range(30, 50)])
    )
    nx.relabel_nodes(g2, node_names, copy=False)
    aa = nx.degree(g2)
    dg = dict([(x, aa[x]) for x in aa._nodes.keys()])
    nx.set_node_attributes(g2, dg, 'Degree')

    # add double attribute to the edges
    for n1, n2, i in g2.edges:
        g2[n1][n2][i]['width'] = np.abs(np.random.randn())

    net2 = cy.network.create_from_networkx(g2, collection='Second network')

    cy.style.apply(my_style, network=net2)



    # TODO: for GSEA/IPA

    # TODO: open questions
    # 1) How to specify the genes shared along the edges?
    # 2)

