import pandas as pd
import os
import re
import collections
from rnaseq import gsea
from settings import OUTPUT_DIR
from utils import log, setops, output, excel
from plotting import venn
from matplotlib import pyplot as plt
logger = log.get_console_logger("process_GSEA_results")


if __name__ == "__main__":
    """
    Use the results generated by exporting data with prepare_data then running GSEA (see code comments in prepare_data).
    """
    pids = ['018', '019', '030', '031', '017', '050', '054', '061', '026', '052']
    refs = ['gibco_nsc', 'h9_nsc']
    top_n_pathways = 20
    units = 'tpm'
    fdr = 0.05  # set to None to skip filtering
    indir = os.path.join(OUTPUT_DIR, "gsea_data", units)
    outdir = output.unique_output_dir("gsea_data")

    subgroups = {
        'RTK I': ['018', '019', '030', '031'],
        'RTK II': ['017', '050', '054', '061'],
        'MES': ['026', '052']
    }

    # indicator showing which groups the PIDs belong to
    subgroup_ind = collections.OrderedDict([
        (k, pd.Index(pids).isin(subgroups[k])) for k in ['RTK I', 'RTK II', 'MES']
    ])

    # S1
    s1_reports = {}
    s1_pathways = {}

    for pid in pids:
        k_up = "%s_up" % pid
        k_down = "%s_down" % pid
        subdir = os.path.join(indir, pid)

        s1_reports[k_up], s1_pathways[k_up] = gsea.load_gsea_report_and_pathways(subdir, comparison='GBM',
                                                                                 load_top_n_pathways=top_n_pathways,
                                                                                 fdr=fdr)
        s1_reports[k_down], s1_pathways[k_down] = gsea.load_gsea_report_and_pathways(subdir, comparison='iNSC',
                                                                                     load_top_n_pathways=top_n_pathways,
                                                                                     fdr=fdr)

    s1_reports_all = {}
    for pid in pids:
        k_up = "%s_up" % pid
        k_down = "%s_down" % pid

        tmp_up = s1_reports[k_up].copy()
        tmp_up.insert(tmp_up.shape[1], 'direction', 'up')

        tmp_down = s1_reports[k_down].copy()
        tmp_down.insert(tmp_down.shape[1], 'direction', 'down')

        tmp_both = pd.concat((tmp_up, tmp_down), axis=0).set_index('pathway')
        tmp_both = tmp_both.loc[tmp_both['nes'].abs().sort_values(ascending=False).index]
        s1_reports_all[pid] = tmp_both

    # S2
    s2_reports = {}
    s2_pathways = {}
    for pid in pids:
        for r in refs:
            k = "%s_%s" % (pid, r)
            k_up = "%s_up" % k
            k_down = "%s_down" % k
            subdir = os.path.join(indir, k)
            s2_reports[k_up], s2_pathways[k_up] = gsea.load_gsea_report_and_pathways(subdir, comparison='GBM',
                                                                                     load_top_n_pathways=top_n_pathways,
                                                                                     fdr=fdr)
            s2_reports[k_down], s2_pathways[k_down] = gsea.load_gsea_report_and_pathways(subdir, comparison='NSC',
                                                                                         load_top_n_pathways=top_n_pathways,
                                                                                         fdr=fdr)

    s2_reports_all = {}
    for pid in pids:
        for r in refs:
            k_up = "%s_%s_up" % (pid, r)
            k_down = "%s_%s_down" % (pid, r)

            tmp_up = s2_reports[k_up].copy()
            tmp_up.insert(tmp_up.shape[1], 'direction', 'up')

            tmp_down = s2_reports[k_down].copy()
            tmp_down.insert(tmp_down.shape[1], 'direction', 'down')

            tmp_both = pd.concat((tmp_up, tmp_down), axis=0).set_index('pathway')
            tmp_both = tmp_both.loc[tmp_both['nes'].abs().sort_values(ascending=False).index]
            s2_reports_all["%s_%s" % (pid, r)] = tmp_both

    # S1 patient-specific

    s1_set_idx = [s1_reports_all[p].index for p in pids]

    subgroup_set_colours = {
        'RTK I full': '#0d680f',
        'RTK II full': '#820505',
        'MES full': '#7900ad',
        'RTK I partial': '#6ecc70',
        'RTK II partial': '#d67373',
        'MES partial': '#cc88ea',  # (partial not possible when n=2)
        'Expanded core': '#4C72B0',
        'Specific': '#f4e842',
    }

    venn_set, venn_ct = setops.venn_from_arrays(*s1_set_idx)
    ups = venn.upset_plot_with_groups(
        s1_set_idx,
        pids,
        subgroup_ind,
        subgroup_set_colours,
        venn_set=venn_set,
        min_size=1,
        n_plot=30,
    )
    ups['axes']['set_size'].set_xlabel("Number of pathways in single patient")
    ups['axes']['main'].set_ylabel("Number of pathways in set")
    ups['figure'].savefig(os.path.join(outdir, "upset_pathways.png"), dpi=200)

    # export
    s1_specific = {}
    specific_sets = setops.specific_sets(pids)
    for p, s in specific_sets.items():
        s1_specific[p] = s1_reports_all[p].loc[venn_set[s]]
    excel.pandas_to_excel(s1_specific, os.path.join(outdir, "s1_patient_specific.xlsx"))

    # S2 syngeneic-only

    s2_syngeneic = {}
    for p in pids:
        in_ours = s1_reports_all[p].index
        in_refs = setops.reduce_union(*[s2_reports_all["%s_%s" % (p, r)].index for r in refs])
        in_so = in_ours.difference(in_refs)
        tmp = s1_reports_all[p].loc[in_so]
        s2_syngeneic[p] = tmp.loc[tmp.nes.abs().sort_values(ascending=False).index]

    fig = plt.figure()
    ax = fig.add_subplot(111)
    ax.bar(
        range(len(pids)),
        [s2_syngeneic[p].shape[0] for p in pids]
    )
    ax.set_xticks(range(len(pids)))
    ax.set_xticklabels(pids)
    ax.set_ylabel("Number of syngeneic-only pathways")
    fig.tight_layout()
    fig.savefig(os.path.join(outdir, "s2_number_syngeneic_only.png"), dpi=200)

    excel.pandas_to_excel(s2_syngeneic, os.path.join(outdir, "s2_syngeneic.xlsx"))

    # S3 patient-specific AND syngeneic only

    s3 = {}
    for p in pids:
        in_s1 = s1_specific[p]
        in_s2 = s2_syngeneic[p]
        tmp = s1_reports_all[p].loc[in_s1.index.intersection(in_s2.index)]
        s3[p] = tmp.loc[tmp.nes.abs().sort_values(ascending=False).index]

    fig = plt.figure()
    ax = fig.add_subplot(111)
    ax.bar(
        range(len(pids)),
        [s3[p].shape[0] for p in pids]
    )
    ax.set_xticks(range(len(pids)))
    ax.set_xticklabels(pids)
    ax.set_ylabel("Number of patient-specific syngeneic-only pathways")
    fig.tight_layout()
    fig.savefig(os.path.join(outdir, "number_merge_patient_specific_syngeneic_only.png"), dpi=200)

    excel.pandas_to_excel(s3, os.path.join(outdir, "merge_patient_specific_syngeneic_only.xlsx"))

